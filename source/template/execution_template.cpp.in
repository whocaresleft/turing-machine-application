#include "../../header/turing_machine.h"
#include "../../header/tape.h"
#include "../../header/alphabet.h"
#include "../../third_party/nlohmann/json.hpp"
#include "../../header/computation.h"
#include "../../header/helper.h"
#include <iostream>

constexpr int K = ${K};

int main(int argc, char const *argv[]) {
    if (argc != 4) {
        std::cerr << "Usage: turing_machine_" << K << " <machine_json_file_path> <alphabet_json_file_path> <tape_json_file_path>" << std::endl;
        return -1;
    }

    json j_machine;
    mdt::json_from_file(j_machine, argv[1]);

    json j_alph;
    mdt::json_from_file(j_alph, argv[2]);

    json j_tape;
    mdt::json_from_file(j_tape, argv[3]);

    const std::optional<mdt::turing_machine<K>> opt_m = mdt::deserialize_turing_machine<K>(j_machine);
    if (!opt_m.has_value()) return -1;
    mdt::turing_machine<K> M = opt_m.value();


    const std::optional<mdt::alphabet> opt_a = mdt::deserialize_alphabet(j_alph);
    if (!opt_a.has_value()) return -1;
    mdt::alphabet S = opt_a.value();

    const std::optional<mdt::tape> opt_t = mdt::deserialize_tape(j_tape);
    if (!opt_t.has_value()) return -1;
    mdt::tape t = opt_t.value();

    mdt::computation<K> comp;
    comp.use_alphabet(S);
    comp.use_tape(t, 0);
    comp.use_machine(M);

    std::cout<<"Initial configuration:" << std::endl;
    std::cout<<comp.output();

    comp.start();
    comp.wait_for_termination();

    std::cout<<"After computation:" << std::endl;
    std::cout<<comp.output();
    std::cout<<"The machine ";
    std::cout << (comp.has_accepted() ? "accepted" : "did not accept");
    std::cout << " the input string";

    return 0;
}
